// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Comptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comptroller entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Comptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Comptroller", id.toString(), this);
    }
  }

  static load(id: string): Comptroller | null {
    return changetype<Comptroller | null>(store.get("Comptroller", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get priceOracle(): Bytes | null {
    let value = this.get("priceOracle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set priceOracle(value: Bytes | null) {
    if (!value) {
      this.unset("priceOracle");
    } else {
      this.set("priceOracle", Value.fromBytes(<Bytes>value));
    }
  }

  get closeFactor(): BigInt | null {
    let value = this.get("closeFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeFactor(value: BigInt | null) {
    if (!value) {
      this.unset("closeFactor");
    } else {
      this.set("closeFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationIncentive(): BigInt | null {
    let value = this.get("liquidationIncentive");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationIncentive(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationIncentive");
    } else {
      this.set("liquidationIncentive", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    return value!.toBigDecimal();
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get borrowRatePerTimestamp(): BigInt {
    let value = this.get("borrowRatePerTimestamp");
    return value!.toBigInt();
  }

  set borrowRatePerTimestamp(value: BigInt) {
    this.set("borrowRatePerTimestamp", Value.fromBigInt(value));
  }

  get borrowRateAPY(): BigDecimal {
    let value = this.get("borrowRateAPY");
    return value!.toBigDecimal();
  }

  set borrowRateAPY(value: BigDecimal) {
    this.set("borrowRateAPY", Value.fromBigDecimal(value));
  }

  get cash(): BigDecimal {
    let value = this.get("cash");
    return value!.toBigDecimal();
  }

  set cash(value: BigDecimal) {
    this.set("cash", Value.fromBigDecimal(value));
  }

  get collateralFactor(): BigDecimal {
    let value = this.get("collateralFactor");
    return value!.toBigDecimal();
  }

  set collateralFactor(value: BigDecimal) {
    this.set("collateralFactor", Value.fromBigDecimal(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    return value!.toBigDecimal();
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get interestRateModelAddress(): Bytes | null {
    let value = this.get("interestRateModelAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set interestRateModelAddress(value: Bytes | null) {
    if (!value) {
      this.unset("interestRateModelAddress");
    } else {
      this.set("interestRateModelAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get supplyRatePerTimestamp(): BigInt {
    let value = this.get("supplyRatePerTimestamp");
    return value!.toBigInt();
  }

  set supplyRatePerTimestamp(value: BigInt) {
    this.set("supplyRatePerTimestamp", Value.fromBigInt(value));
  }

  get supplyRateAPY(): BigDecimal | null {
    let value = this.get("supplyRateAPY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set supplyRateAPY(value: BigDecimal | null) {
    if (!value) {
      this.unset("supplyRateAPY");
    } else {
      this.set("supplyRateAPY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value!.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get suppliersCount(): i32 {
    let value = this.get("suppliersCount");
    return value!.toI32();
  }

  set suppliersCount(value: i32) {
    this.set("suppliersCount", Value.fromI32(value));
  }

  get borrowersCount(): i32 {
    let value = this.get("borrowersCount");
    return value!.toI32();
  }

  set borrowersCount(value: i32) {
    this.set("borrowersCount", Value.fromI32(value));
  }

  get underlyingPrice(): BigDecimal {
    let value = this.get("underlyingPrice");
    return value!.toBigDecimal();
  }

  set underlyingPrice(value: BigDecimal) {
    this.set("underlyingPrice", Value.fromBigDecimal(value));
  }

  get accrualBlockTimestamp(): BigInt | null {
    let value = this.get("accrualBlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accrualBlockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("accrualBlockTimestamp");
    } else {
      this.set("accrualBlockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get borrowIndex(): BigDecimal {
    let value = this.get("borrowIndex");
    return value!.toBigDecimal();
  }

  set borrowIndex(value: BigDecimal) {
    this.set("borrowIndex", Value.fromBigDecimal(value));
  }

  get reserveFactor(): BigDecimal {
    let value = this.get("reserveFactor");
    return value!.toBigDecimal();
  }

  set reserveFactor(value: BigDecimal) {
    this.set("reserveFactor", Value.fromBigDecimal(value));
  }

  get underlyingPriceUSD(): BigDecimal {
    let value = this.get("underlyingPriceUSD");
    return value!.toBigDecimal();
  }

  set underlyingPriceUSD(value: BigDecimal) {
    this.set("underlyingPriceUSD", Value.fromBigDecimal(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get underlyingName(): string {
    let value = this.get("underlyingName");
    return value!.toString();
  }

  set underlyingName(value: string) {
    this.set("underlyingName", Value.fromString(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value!.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get underlyingDecimals(): i32 {
    let value = this.get("underlyingDecimals");
    return value!.toI32();
  }

  set underlyingDecimals(value: i32) {
    this.set("underlyingDecimals", Value.fromI32(value));
  }

  get accounts(): Array<string> {
    let value = this.get("accounts");
    return value!.toStringArray();
  }

  set accounts(value: Array<string>) {
    this.set("accounts", Value.fromStringArray(value));
  }

  get marketEvents(): Array<string> {
    let value = this.get("marketEvents");
    return value!.toStringArray();
  }

  set marketEvents(value: Array<string>) {
    this.set("marketEvents", Value.fromStringArray(value));
  }

  get denomination(): string | null {
    let value = this.get("denomination");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denomination(value: string | null) {
    if (!value) {
      this.unset("denomination");
    } else {
      this.set("denomination", Value.fromString(<string>value));
    }
  }

  get hourlySnapshots(): Array<string> {
    let value = this.get("hourlySnapshots");
    return value!.toStringArray();
  }

  set hourlySnapshots(value: Array<string>) {
    this.set("hourlySnapshots", Value.fromStringArray(value));
  }

  get dailySnapshots(): Array<string> {
    let value = this.get("dailySnapshots");
    return value!.toStringArray();
  }

  set dailySnapshots(value: Array<string>) {
    this.set("dailySnapshots", Value.fromStringArray(value));
  }
}

export class MarketHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketHourlySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketHourlySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): MarketHourlySnapshot | null {
    return changetype<MarketHourlySnapshot | null>(
      store.get("MarketHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get lastBlockNumber(): BigInt {
    let value = this.get("lastBlockNumber");
    return value!.toBigInt();
  }

  set lastBlockNumber(value: BigInt) {
    this.set("lastBlockNumber", Value.fromBigInt(value));
  }

  get lastBlockHash(): Bytes {
    let value = this.get("lastBlockHash");
    return value!.toBytes();
  }

  set lastBlockHash(value: Bytes) {
    this.set("lastBlockHash", Value.fromBytes(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    return value!.toBigDecimal();
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get borrowRatePerTimestamp(): BigInt {
    let value = this.get("borrowRatePerTimestamp");
    return value!.toBigInt();
  }

  set borrowRatePerTimestamp(value: BigInt) {
    this.set("borrowRatePerTimestamp", Value.fromBigInt(value));
  }

  get borrowRateAPY(): BigDecimal {
    let value = this.get("borrowRateAPY");
    return value!.toBigDecimal();
  }

  set borrowRateAPY(value: BigDecimal) {
    this.set("borrowRateAPY", Value.fromBigDecimal(value));
  }

  get cash(): BigDecimal {
    let value = this.get("cash");
    return value!.toBigDecimal();
  }

  set cash(value: BigDecimal) {
    this.set("cash", Value.fromBigDecimal(value));
  }

  get collateralFactor(): BigDecimal {
    let value = this.get("collateralFactor");
    return value!.toBigDecimal();
  }

  set collateralFactor(value: BigDecimal) {
    this.set("collateralFactor", Value.fromBigDecimal(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    return value!.toBigDecimal();
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get interestRateModelAddress(): Bytes | null {
    let value = this.get("interestRateModelAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set interestRateModelAddress(value: Bytes | null) {
    if (!value) {
      this.unset("interestRateModelAddress");
    } else {
      this.set("interestRateModelAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get supplyRatePerTimestamp(): BigInt {
    let value = this.get("supplyRatePerTimestamp");
    return value!.toBigInt();
  }

  set supplyRatePerTimestamp(value: BigInt) {
    this.set("supplyRatePerTimestamp", Value.fromBigInt(value));
  }

  get supplyRateAPY(): BigDecimal | null {
    let value = this.get("supplyRateAPY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set supplyRateAPY(value: BigDecimal | null) {
    if (!value) {
      this.unset("supplyRateAPY");
    } else {
      this.set("supplyRateAPY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value!.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get suppliersCount(): i32 {
    let value = this.get("suppliersCount");
    return value!.toI32();
  }

  set suppliersCount(value: i32) {
    this.set("suppliersCount", Value.fromI32(value));
  }

  get borrowersCount(): i32 {
    let value = this.get("borrowersCount");
    return value!.toI32();
  }

  set borrowersCount(value: i32) {
    this.set("borrowersCount", Value.fromI32(value));
  }

  get underlyingPrice(): BigDecimal {
    let value = this.get("underlyingPrice");
    return value!.toBigDecimal();
  }

  set underlyingPrice(value: BigDecimal) {
    this.set("underlyingPrice", Value.fromBigDecimal(value));
  }

  get accrualBlockTimestamp(): BigInt | null {
    let value = this.get("accrualBlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accrualBlockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("accrualBlockTimestamp");
    } else {
      this.set("accrualBlockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get borrowIndex(): BigDecimal {
    let value = this.get("borrowIndex");
    return value!.toBigDecimal();
  }

  set borrowIndex(value: BigDecimal) {
    this.set("borrowIndex", Value.fromBigDecimal(value));
  }

  get reserveFactor(): BigDecimal {
    let value = this.get("reserveFactor");
    return value!.toBigDecimal();
  }

  set reserveFactor(value: BigDecimal) {
    this.set("reserveFactor", Value.fromBigDecimal(value));
  }

  get underlyingPriceUSD(): BigDecimal {
    let value = this.get("underlyingPriceUSD");
    return value!.toBigDecimal();
  }

  set underlyingPriceUSD(value: BigDecimal) {
    this.set("underlyingPriceUSD", Value.fromBigDecimal(value));
  }
}

export class MarketDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketDailySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): MarketDailySnapshot | null {
    return changetype<MarketDailySnapshot | null>(
      store.get("MarketDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get lastBlockNumber(): BigInt {
    let value = this.get("lastBlockNumber");
    return value!.toBigInt();
  }

  set lastBlockNumber(value: BigInt) {
    this.set("lastBlockNumber", Value.fromBigInt(value));
  }

  get lastBlockHash(): Bytes {
    let value = this.get("lastBlockHash");
    return value!.toBytes();
  }

  set lastBlockHash(value: Bytes) {
    this.set("lastBlockHash", Value.fromBytes(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    return value!.toBigDecimal();
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get borrowRatePerTimestamp(): BigInt {
    let value = this.get("borrowRatePerTimestamp");
    return value!.toBigInt();
  }

  set borrowRatePerTimestamp(value: BigInt) {
    this.set("borrowRatePerTimestamp", Value.fromBigInt(value));
  }

  get borrowRateAPY(): BigDecimal {
    let value = this.get("borrowRateAPY");
    return value!.toBigDecimal();
  }

  set borrowRateAPY(value: BigDecimal) {
    this.set("borrowRateAPY", Value.fromBigDecimal(value));
  }

  get cash(): BigDecimal {
    let value = this.get("cash");
    return value!.toBigDecimal();
  }

  set cash(value: BigDecimal) {
    this.set("cash", Value.fromBigDecimal(value));
  }

  get collateralFactor(): BigDecimal {
    let value = this.get("collateralFactor");
    return value!.toBigDecimal();
  }

  set collateralFactor(value: BigDecimal) {
    this.set("collateralFactor", Value.fromBigDecimal(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    return value!.toBigDecimal();
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get interestRateModelAddress(): Bytes | null {
    let value = this.get("interestRateModelAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set interestRateModelAddress(value: Bytes | null) {
    if (!value) {
      this.unset("interestRateModelAddress");
    } else {
      this.set("interestRateModelAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get supplyRatePerTimestamp(): BigInt {
    let value = this.get("supplyRatePerTimestamp");
    return value!.toBigInt();
  }

  set supplyRatePerTimestamp(value: BigInt) {
    this.set("supplyRatePerTimestamp", Value.fromBigInt(value));
  }

  get supplyRateAPY(): BigDecimal | null {
    let value = this.get("supplyRateAPY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set supplyRateAPY(value: BigDecimal | null) {
    if (!value) {
      this.unset("supplyRateAPY");
    } else {
      this.set("supplyRateAPY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value!.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get suppliersCount(): i32 {
    let value = this.get("suppliersCount");
    return value!.toI32();
  }

  set suppliersCount(value: i32) {
    this.set("suppliersCount", Value.fromI32(value));
  }

  get borrowersCount(): i32 {
    let value = this.get("borrowersCount");
    return value!.toI32();
  }

  set borrowersCount(value: i32) {
    this.set("borrowersCount", Value.fromI32(value));
  }

  get underlyingPrice(): BigDecimal {
    let value = this.get("underlyingPrice");
    return value!.toBigDecimal();
  }

  set underlyingPrice(value: BigDecimal) {
    this.set("underlyingPrice", Value.fromBigDecimal(value));
  }

  get accrualBlockTimestamp(): BigInt | null {
    let value = this.get("accrualBlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accrualBlockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("accrualBlockTimestamp");
    } else {
      this.set("accrualBlockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get borrowIndex(): BigDecimal {
    let value = this.get("borrowIndex");
    return value!.toBigDecimal();
  }

  set borrowIndex(value: BigDecimal) {
    this.set("borrowIndex", Value.fromBigDecimal(value));
  }

  get reserveFactor(): BigDecimal {
    let value = this.get("reserveFactor");
    return value!.toBigDecimal();
  }

  set reserveFactor(value: BigDecimal) {
    this.set("reserveFactor", Value.fromBigDecimal(value));
  }

  get underlyingPriceUSD(): BigDecimal {
    let value = this.get("underlyingPriceUSD");
    return value!.toBigDecimal();
  }

  set underlyingPriceUSD(value: BigDecimal) {
    this.set("underlyingPriceUSD", Value.fromBigDecimal(value));
  }
}

export class AccountMarketSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountMarketSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountMarketSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountMarketSnapshot", id.toString(), this);
    }
  }

  static load(id: string): AccountMarketSnapshot | null {
    return changetype<AccountMarketSnapshot | null>(
      store.get("AccountMarketSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountMarket(): string {
    let value = this.get("accountMarket");
    return value!.toString();
  }

  set accountMarket(value: string) {
    this.set("accountMarket", Value.fromString(value));
  }

  get accrualBlockTimestamp(): BigInt | null {
    let value = this.get("accrualBlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accrualBlockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("accrualBlockTimestamp");
    } else {
      this.set("accrualBlockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalSupplyAmount(): BigDecimal {
    let value = this.get("totalSupplyAmount");
    return value!.toBigDecimal();
  }

  set totalSupplyAmount(value: BigDecimal) {
    this.set("totalSupplyAmount", Value.fromBigDecimal(value));
  }

  get storedBorrowBalance(): BigDecimal {
    let value = this.get("storedBorrowBalance");
    return value!.toBigDecimal();
  }

  set storedBorrowBalance(value: BigDecimal) {
    this.set("storedBorrowBalance", Value.fromBigDecimal(value));
  }

  get borrowBalanceWithInterest(): BigDecimal {
    let value = this.get("borrowBalanceWithInterest");
    return value!.toBigDecimal();
  }

  set borrowBalanceWithInterest(value: BigDecimal) {
    this.set("borrowBalanceWithInterest", Value.fromBigDecimal(value));
  }

  get marketBorrowIndex(): BigDecimal {
    let value = this.get("marketBorrowIndex");
    return value!.toBigDecimal();
  }

  set marketBorrowIndex(value: BigDecimal) {
    this.set("marketBorrowIndex", Value.fromBigDecimal(value));
  }

  get accountBorrowIndex(): BigDecimal {
    let value = this.get("accountBorrowIndex");
    return value!.toBigDecimal();
  }

  set accountBorrowIndex(value: BigDecimal) {
    this.set("accountBorrowIndex", Value.fromBigDecimal(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    return value!.toBigDecimal();
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get countLiquidated(): i32 {
    let value = this.get("countLiquidated");
    return value!.toI32();
  }

  set countLiquidated(value: i32) {
    this.set("countLiquidated", Value.fromI32(value));
  }

  get countLiquidator(): i32 {
    let value = this.get("countLiquidator");
    return value!.toI32();
  }

  set countLiquidator(value: i32) {
    this.set("countLiquidator", Value.fromI32(value));
  }

  get hasBorrowed(): boolean {
    let value = this.get("hasBorrowed");
    return value!.toBoolean();
  }

  set hasBorrowed(value: boolean) {
    this.set("hasBorrowed", Value.fromBoolean(value));
  }

  get accountEvents(): Array<string> {
    let value = this.get("accountEvents");
    return value!.toStringArray();
  }

  set accountEvents(value: Array<string>) {
    this.set("accountEvents", Value.fromStringArray(value));
  }
}

export class AccountCToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountCToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountCToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountCToken", id.toString(), this);
    }
  }

  static load(id: string): AccountCToken | null {
    return changetype<AccountCToken | null>(store.get("AccountCToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accrualBlockTimestamp(): BigInt {
    let value = this.get("accrualBlockTimestamp");
    return value!.toBigInt();
  }

  set accrualBlockTimestamp(value: BigInt) {
    this.set("accrualBlockTimestamp", Value.fromBigInt(value));
  }

  get enteredMarket(): boolean {
    let value = this.get("enteredMarket");
    return value!.toBoolean();
  }

  set enteredMarket(value: boolean) {
    this.set("enteredMarket", Value.fromBoolean(value));
  }

  get cTokenBalance(): BigDecimal {
    let value = this.get("cTokenBalance");
    return value!.toBigDecimal();
  }

  set cTokenBalance(value: BigDecimal) {
    this.set("cTokenBalance", Value.fromBigDecimal(value));
  }

  get totalUnderlyingSupplied(): BigDecimal {
    let value = this.get("totalUnderlyingSupplied");
    return value!.toBigDecimal();
  }

  set totalUnderlyingSupplied(value: BigDecimal) {
    this.set("totalUnderlyingSupplied", Value.fromBigDecimal(value));
  }

  get totalUnderlyingRedeemed(): BigDecimal {
    let value = this.get("totalUnderlyingRedeemed");
    return value!.toBigDecimal();
  }

  set totalUnderlyingRedeemed(value: BigDecimal) {
    this.set("totalUnderlyingRedeemed", Value.fromBigDecimal(value));
  }

  get accountBorrowIndex(): BigDecimal {
    let value = this.get("accountBorrowIndex");
    return value!.toBigDecimal();
  }

  set accountBorrowIndex(value: BigDecimal) {
    this.set("accountBorrowIndex", Value.fromBigDecimal(value));
  }

  get totalUnderlyingBorrowed(): BigDecimal {
    let value = this.get("totalUnderlyingBorrowed");
    return value!.toBigDecimal();
  }

  set totalUnderlyingBorrowed(value: BigDecimal) {
    this.set("totalUnderlyingBorrowed", Value.fromBigDecimal(value));
  }

  get totalUnderlyingRepaid(): BigDecimal {
    let value = this.get("totalUnderlyingRepaid");
    return value!.toBigDecimal();
  }

  set totalUnderlyingRepaid(value: BigDecimal) {
    this.set("totalUnderlyingRepaid", Value.fromBigDecimal(value));
  }

  get storedBorrowBalance(): BigDecimal {
    let value = this.get("storedBorrowBalance");
    return value!.toBigDecimal();
  }

  set storedBorrowBalance(value: BigDecimal) {
    this.set("storedBorrowBalance", Value.fromBigDecimal(value));
  }

  get snapshots(): Array<string> {
    let value = this.get("snapshots");
    return value!.toStringArray();
  }

  set snapshots(value: Array<string>) {
    this.set("snapshots", Value.fromStringArray(value));
  }

  get tokenEvents(): Array<string> {
    let value = this.get("tokenEvents");
    return value!.toStringArray();
  }

  set tokenEvents(value: Array<string>) {
    this.set("tokenEvents", Value.fromStringArray(value));
  }
}

export class AccountCTokenEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountCTokenEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountCTokenEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountCTokenEvent", id.toString(), this);
    }
  }

  static load(id: string): AccountCTokenEvent | null {
    return changetype<AccountCTokenEvent | null>(
      store.get("AccountCTokenEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get accountCToken(): string {
    let value = this.get("accountCToken");
    return value!.toString();
  }

  set accountCToken(value: string) {
    this.set("accountCToken", Value.fromString(value));
  }
}

export class TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferEvent", id.toString(), this);
    }
  }

  static load(id: string): TransferEvent | null {
    return changetype<TransferEvent | null>(store.get("TransferEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class MintEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintEvent", id.toString(), this);
    }
  }

  static load(id: string): MintEvent | null {
    return changetype<MintEvent | null>(store.get("MintEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get underlyingAmount(): BigDecimal | null {
    let value = this.get("underlyingAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set underlyingAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("underlyingAmount");
    } else {
      this.set("underlyingAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RedeemEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedeemEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedeemEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RedeemEvent", id.toString(), this);
    }
  }

  static load(id: string): RedeemEvent | null {
    return changetype<RedeemEvent | null>(store.get("RedeemEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get underlyingAmount(): BigDecimal | null {
    let value = this.get("underlyingAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set underlyingAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("underlyingAmount");
    } else {
      this.set("underlyingAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class LiquidationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidationEvent", id.toString(), this);
    }
  }

  static load(id: string): LiquidationEvent | null {
    return changetype<LiquidationEvent | null>(
      store.get("LiquidationEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get seizedMarket(): string {
    let value = this.get("seizedMarket");
    return value!.toString();
  }

  set seizedMarket(value: string) {
    this.set("seizedMarket", Value.fromString(value));
  }

  get repayMarket(): string {
    let value = this.get("repayMarket");
    return value!.toString();
  }

  set repayMarket(value: string) {
    this.set("repayMarket", Value.fromString(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    return value!.toString();
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get seizedTokens(): BigDecimal {
    let value = this.get("seizedTokens");
    return value!.toBigDecimal();
  }

  set seizedTokens(value: BigDecimal) {
    this.set("seizedTokens", Value.fromBigDecimal(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value!.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get underlyingRepayAmount(): BigDecimal {
    let value = this.get("underlyingRepayAmount");
    return value!.toBigDecimal();
  }

  set underlyingRepayAmount(value: BigDecimal) {
    this.set("underlyingRepayAmount", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class BorrowEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BorrowEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BorrowEvent", id.toString(), this);
    }
  }

  static load(id: string): BorrowEvent | null {
    return changetype<BorrowEvent | null>(store.get("BorrowEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get accountBorrows(): BigDecimal {
    let value = this.get("accountBorrows");
    return value!.toBigDecimal();
  }

  set accountBorrows(value: BigDecimal) {
    this.set("accountBorrows", Value.fromBigDecimal(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value!.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RepayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RepayEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RepayEvent", id.toString(), this);
    }
  }

  static load(id: string): RepayEvent | null {
    return changetype<RepayEvent | null>(store.get("RepayEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get payer(): string {
    let value = this.get("payer");
    return value!.toString();
  }

  set payer(value: string) {
    this.set("payer", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get accountBorrows(): BigDecimal {
    let value = this.get("accountBorrows");
    return value!.toBigDecimal();
  }

  set accountBorrows(value: BigDecimal) {
    this.set("accountBorrows", Value.fromBigDecimal(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value!.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class MarketEnteredEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketEnteredEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketEnteredEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketEnteredEvent", id.toString(), this);
    }
  }

  static load(id: string): MarketEnteredEvent | null {
    return changetype<MarketEnteredEvent | null>(
      store.get("MarketEnteredEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class MarketExitedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketExitedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketExitedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketExitedEvent", id.toString(), this);
    }
  }

  static load(id: string): MarketExitedEvent | null {
    return changetype<MarketExitedEvent | null>(
      store.get("MarketExitedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (!value) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(<BigInt>value));
    }
  }
}
