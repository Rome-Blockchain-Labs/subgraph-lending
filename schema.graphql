"""
The Comptroller type has protocol level variables stored
"""
type Comptroller @entity {
  "ID is set to 1"
  id: ID!
  "Address of price oracle the comptroller uses"
  priceOracle: Bytes
  "Factor used to determine repayAmount for liquidating"
  closeFactor: BigInt
  "The percent bonus liquidators get for liquidating"
  liquidationIncentive: BigInt

  "Comptroller address"
  address: Bytes!
}

interface MarketInfo {
  
  #Fields that match compounds API
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!
  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes
  "Reserves stored in the contract"
  reserves: BigDecimal
  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal
  "Borrows in the market"
  totalBorrows: BigDecimal!
  "CToken supply. CTokens have 8 decimals"
  totalSupply: BigDecimal!
  "Number of users holding market tokens"
  suppliersCount: Int!
  "Number of users with pending borrows"
  borrowersCount: Int!
  "Underlying price of token in ETH (ex. 0.007 DAI)"
  underlyingPrice: BigDecimal!

  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: BigInt
  "Timestamp the market was most recently updated"
  blockTimestamp: BigInt!
  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigDecimal!
  "Underlying token price in USD"
  underlyingPriceUSD: BigDecimal!

  # @yhayun - added specifically for benqi:
  "Total rewards accrued per reward type. The array index is the same as the reward type index and the unit is that of the reward type"
  totalRewardsDistributed: [BigDecimal!]!
  "Total interest accrued"
  totalFeesGenerated: BigDecimal!
  "The part of total fees that goes to the protocol"
  totalProtocolFeesGenerated: BigDecimal!
}

"""
Market stores all high level variables for a cToken market
"""
type Market implements MarketInfo @entity {
  "CToken address"
  id: ID!
  
  ### INTERFACE FIELDS
  #Fields that match compounds API
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!
  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes
  "Reserves stored in the contract"
  reserves: BigDecimal
  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal
  "Borrows in the market"
  totalBorrows: BigDecimal!
  "CToken supply. CTokens have 8 decimals"
  totalSupply: BigDecimal!
  "Number of users holding market tokens"
  suppliersCount: Int!
  "Number of users with pending borrows"
  borrowersCount: Int!
  "Underlying price of token in ETH (ex. 0.007 DAI)"
  underlyingPrice: BigDecimal!

  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: BigInt
  "Timestamp the market was most recently updated"
  blockTimestamp: BigInt!
  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigDecimal!
  "Underlying token price in USD"
  underlyingPriceUSD: BigDecimal!

  # @yhayun - added specifically for benqi:
  "Total rewards accrued per reward type. The array index is the same as the reward type index and the unit is that of the reward type"
  totalRewardsDistributed: [BigDecimal!]!
  "Total interest accrued"
  totalFeesGenerated: BigDecimal!
  "The part of total fees that goes to the protocol"
  totalProtocolFeesGenerated: BigDecimal!
  
  ### END OF INTERFACE FIELDS

  #Fields that match compounds API
  "Name of the cToken"
  name: String!
  "CToken symbol"
  symbol: String!
  "Underlying token address"
  underlyingAddress: Bytes!
  "Underlying token name"
  underlyingName: String!
  "Underlying token symbol"
  underlyingSymbol: String!

  # Fields that are not in compounds api
  "Underlying token decimal length"
  underlyingDecimals: Int!

  # @yhayun - added specifically for benqi:
  "Underlying token"
  denomination: Token
  """Since CTokenTransfer uses the Seized market as the main market, 
  this field enables the search of liquidation events where this is the market being repaid"""
  repaymentsThroughLiquidation: [LiquidationEvent!]! @derivedFrom(field: "repayMarket")
  "All cTokenTransfer events which the token of this market is being transfered (i.e. LiquidationEvents only appear on the Collateral market)"
  cTokenTransfers: [CTokenTransfer!]! @derivedFrom(field: "market")
  "Transfers of the Underlying Token where no market token is being transfered (i.e. Borrow and Repay)"
  underlyingTransfer: [UnderlyingTransfer!]! @derivedFrom(field: "market")

  hourlySnapshots: [MarketHourlySnapshot!]! @derivedFrom(field: "market")
  dailySnapshots: [MarketDailySnapshot!]! @derivedFrom(field: "market")
}

"""
Saves the historical values in the Market over time for every beginning of hour in UTC.
Basically a copy of the market values in that particular moment
"""
type MarketHourlySnapshot implements MarketInfo @entity {
  "The id is marketId-timestamp"
  id: ID!
  market: Market!
  "UTC timestamp for the beginning of the hour (ex.: timestamp for 01:00:00, 14:00:00, ...)"
  timestamp: BigInt!
  lastBlockNumber: BigInt!
  lastBlockHash: String!

  ### INTERFACE FIELDS
  #Fields that match compounds API
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!
  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes
  "Reserves stored in the contract"
  reserves: BigDecimal
  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal
  "Borrows in the market"
  totalBorrows: BigDecimal!
  "CToken supply. CTokens have 8 decimals"
  totalSupply: BigDecimal!
  "Number of users holding market tokens"
  suppliersCount: Int!
  "Number of users with pending borrows"
  borrowersCount: Int!
  "Underlying price of token in ETH (ex. 0.007 DAI)"
  underlyingPrice: BigDecimal!

  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: BigInt
  "Timestamp the market was most recently updated"
  blockTimestamp: BigInt!
  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigDecimal!
  "Underlying token price in USD"
  underlyingPriceUSD: BigDecimal!

  # @yhayun - added specifically for benqi:
  "Total rewards accrued per reward type. The array index is the same as the reward type index and the unit is that of the reward type"
  totalRewardsDistributed: [BigDecimal!]!
  "Total interest accrued"
  totalFeesGenerated: BigDecimal!
  "The part of total fees that goes to the protocol"
  totalProtocolFeesGenerated: BigDecimal!
  
  ### END OF INTERFACE FIELDS
}

"""
Saves the historical values in the Market over time for every beginning of a day in UTC.
Basically a copy of the market values in that particular moment
"""
type MarketDailySnapshot implements MarketInfo @entity {
  "The id is marketId-timestamp"
  id: ID!
  market: Market!
  "UTC timestamp for the beginning of the day (ex.: timestamp for Day 1 00:00:00, Day 2 00:00:00, ...)"
  timestamp: BigInt!
  lastBlockNumber: BigInt!
  lastBlockHash: String!

  ### INTERFACE FIELDS
  #Fields that match compounds API
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!
  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes
  "Reserves stored in the contract"
  reserves: BigDecimal
  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal
  "Borrows in the market"
  totalBorrows: BigDecimal!
  "CToken supply. CTokens have 8 decimals"
  totalSupply: BigDecimal!
  "Number of users holding market tokens"
  suppliersCount: Int!
  "Number of users with pending borrows"
  borrowersCount: Int!
  "Underlying price of token in ETH (ex. 0.007 DAI)"
  underlyingPrice: BigDecimal!

  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: BigInt
  "Timestamp the market was most recently updated"
  blockTimestamp: BigInt!
  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigDecimal!
  "Underlying token price in USD"
  underlyingPriceUSD: BigDecimal!

  # @yhayun - added specifically for benqi:
  "Total rewards accrued per reward type. The array index is the same as the reward type index and the unit is that of the reward type"
  totalRewardsDistributed: [BigDecimal!]!
  "Total interest accrued"
  totalFeesGenerated: BigDecimal!
  "The part of total fees that goes to the protocol"
  totalProtocolFeesGenerated: BigDecimal!
  
  ### END OF INTERFACE FIELDS
}

type AccountSnapshot @entity(immutable: true) {
  id: ID!
  account: Account!
  market: Market!
  blockNumber: Int!
  supply_amount: BigDecimal!
  borrow_amount: BigDecimal!
}

"""
Account is an ETH address, with a list of all cToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
  "User ETH address"
  id: ID!
  "Array of CTokens user is in"
  tokens: [AccountCToken!]! @derivedFrom(field: "account")
  "Count user has been liquidated"
  countLiquidated: Int!
  "Count user has liquidated others"
  countLiquidator: Int!
  "True if user has ever borrowed"
  hasBorrowed: Boolean!

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground

  # "If less than 1, the account can be liquidated
  # health: BigDecimal!
  # "Total assets supplied by user"
  # totalBorrowValueInEth: BigDecimal!
  # "Total assets borrowed from user"
  # totalCollateralValueInEth: BigDecimal!
}

"""
AccountCToken is a single account within a single cToken market, with data such
as interest earned or paid
"""
type AccountCToken @entity {
  "Concatenation of CToken address and user address"
  id: ID!
  "Relation to market"
  market: Market!
  "Symbol of the cToken"
  symbol: String!
  "Relation to user"
  account: Account!
  "Transactions data"
  transactions: [AccountCTokenTransaction!]! @derivedFrom(field: "account")
  "Block number this asset was updated at in the contract"
  accrualBlockNumber: BigInt!
  "True if user is entered, false if they are exited"
  enteredMarket: Boolean!

  "CToken balance of the user"
  cTokenBalance: BigDecimal!
  "Total amount of underlying supplied"
  totalUnderlyingSupplied: BigDecimal!
  "Total amount of underling redeemed"
  totalUnderlyingRedeemed: BigDecimal!
  "The value of the borrow index upon users last interaction"
  accountBorrowIndex: BigDecimal!
  "Total amount underlying borrowed, exclusive of interest"
  totalUnderlyingBorrowed: BigDecimal!
  "Total amount underlying repaid"
  totalUnderlyingRepaid: BigDecimal!
  "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
  storedBorrowBalance: BigDecimal!

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground
  # NOTE: this a custom feature that The Graph implemented for our subgraph. It's not yet
  # available to the public.

  # supplyBalanceUnderlying: BigDecimal!
  # FORMULA: supplyBalanceUnderlying = cTokenBalance * market.exchangeRate

  # lifetimeSupplyInterestAccrued: BigDecimal!
  # FORMULA: lifetimeSupplyInterestAccrued = supplyBalanceUnderlying - totalUnderlyingSupplied + totalUnderlyingRedeemed

  # borrowBalanceUnderlying: BigDecimal!
  # FORMULA: borrowBalanceUnderlying = storedBorrowBalance * market.borrowIndex / accountBorrowIndex

  # lifetimeBorrowInterestAccrued: BigDecimal!
  # FORMULA: lifetimeBorrowInterestAccrued = borrowBalanceUnderlying - totalUnderlyingBorrowed + totalUnderlyingRepaid
}

"""
Auxiliary entity for AccountCToken
"""
type AccountCTokenTransaction @entity {
  id: ID!

  account: AccountCToken!

  tx_hash: Bytes!

  timestamp: BigInt!

  block: BigInt!

  logIndex: BigInt!
}

"""
Types of CTokenTransfers
"""
enum CTokenTransferType {
  Transfer
  Mint
  Redeem
  Liquidation
}

"""
An interface for a transfer of any cToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
interface CTokenTransfer {
  "Transaction hash concatenated with log index"
  id: ID!
  "Type of the specific transfer"
  type: CTokenTransferType!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens"
  to: Bytes!
  "Account that sent tokens"
  from: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "The cToken transferred"
  market: Market!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal
transfer between two accounts.
"""
type TransferEvent implements CTokenTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Type of the specific transfer"
  type: CTokenTransferType!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens"
  to: Bytes!
  "Account that sent tokens"
  from: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "The cToken transferred"
  market: Market!
}

"""
MintEvent stores information for mints. From address will always be a cToken
market address
"""
type MintEvent implements CTokenTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Type of the specific transfer"
  type: CTokenTransferType!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens (minter)"
  to: Bytes!
  "Account that sent tokens (CToken contract)"
  from: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "The cToken transferred"
  market: Market!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal
}

"""
RedeemEvent stores information for redeems. To address will always be a
cToken market address
"""
type RedeemEvent implements CTokenTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Type of the specific transfer"
  type: CTokenTransferType!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens (CToken contract)"
  to: Bytes!
  "Account that sent tokens (redeemer)"
  from: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "The cToken transferred"
  market: Market!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from
the cToken market address.
"""
type LiquidationEvent implements CTokenTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Type of the specific transfer"
  type: CTokenTransferType!
  "cTokens seized"
  amount: BigDecimal!
  "Liquidator receiving tokens"
  to: Bytes!
  "Account being liquidated (borrower)"
  from: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "cToken that was seized as collateral"
  market: Market!
  "The cToken that was repaid during this liquidation"
  repayMarket: Market!
  "Symbol of the underlying asset repaid through liquidation"
  underlyingSymbol: String!
  "Underlying cToken amount that was repaid by liquidator"
  underlyingRepayAmount: BigDecimal!
}

"""
Types of UnderlyingTransfer
"""
enum UnderlyingTransferType {
  Borrow
  Repay
}

"""
Underlying transfers are transfers of underlying collateral for both borrows
and repays
"""
interface UnderlyingTransfer {
  "Transaction hash concatenated with log index"
  id: ID!
  "Specific type of the implementation"
  type: UnderlyingTransferType!
  "The cToken where the lending happened"
  market: Market!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Symbol of the borrowed underlying asset"
  underlyingSymbol: String!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowEvent implements UnderlyingTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Market from which the token is being borrowed"
  market: Market!
  "Specific type of the implementation"
  type: UnderlyingTransferType!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Symbol of the borrowed underlying asset"
  underlyingSymbol: String!
}

"""
RepayEvent stores information for repays. Payer is not always the same as
borrower, such as in the event of a Liquidation
"""
type RepayEvent implements UnderlyingTransfer @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: ID!
  "Market to which the token is being repaid"
  market: Market!
  "Specific type of the implementation"
  type: UnderlyingTransferType!
  "Amount of underlying repaid"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Symbol of the borrowed underlying asset"
  underlyingSymbol: String!
  "Payer of the borrow funds"
  payer: Bytes!
}

type Token @entity(immutable: true) {
  "Token address"
  id: ID!

  "Token address"
  address: Bytes!

  "Token name"
  name: String

  "Token symbol"
  symbol: String

  "Token decimals"
  decimals: Int

  "Token's total supply"
  totalSupply: BigInt
}
